<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Huang的技术生活</title>
  
  <subtitle>一些关于技术的思考，想法和积累</subtitle>
  <link href="https://www.jackhuang.cc/atom.xml" rel="self"/>
  
  <link href="https://www.jackhuang.cc/"/>
  <updated>2023-01-06T15:03:05.773Z</updated>
  <id>https://www.jackhuang.cc/</id>
  
  <author>
    <name>Jack Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++右值引用场景分析</title>
    <link href="https://www.jackhuang.cc/2023/01/05/%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90/"/>
    <id>https://www.jackhuang.cc/2023/01/05/%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90/</id>
    <published>2023-01-05T04:42:57.000Z</published>
    <updated>2023-01-06T15:03:05.773Z</updated>
    
    <content type="html"><![CDATA[<p>今天就向右值引用的使用场景进行开炮。</p><p>首先，几句话快速复习左值右值：</p><span id="more"></span><p>左值：有一个生命范围的值。左值有名称。</p><p>右值：不像左值在某个范围都能存在，而右值生命始于某一行也终于那一行的值，除非有右值引用接住它的资源，否则过了那一行就要变成invalid的值。std::move可以把左值转为右值，进而执行资源转移语义。右值无名称，但右值的引用可以有名称。</p><p>我们先写一个基本类，好跟踪调试：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyString</span>&#123;</span><br><span class="line">    <span class="type">char</span>* s_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyString</span>(<span class="type">const</span> <span class="type">char</span>* other) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;in common constructor!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">copy</span>(other);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MyString</span>() &#123;</span><br><span class="line">        <span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MyString</span>(<span class="type">const</span> MyString&amp; other) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;in left value reference!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">copy</span>(other.s_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MyString</span>(MyString&amp;&amp; other) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;in right value reference!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">copy</span>(other.s_);</span><br><span class="line">        other.<span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">what</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s_;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span>[] s_;</span><br><span class="line">        s_ = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">copy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* other)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">release</span>();</span><br><span class="line">        <span class="type">int</span> len = (<span class="type">int</span>)<span class="built_in">strlen</span>(other);</span><br><span class="line">        s_ = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strncpy</span>(s_, other, len);</span><br><span class="line">        s_[len] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Whatis</span>;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; out, <span class="type">const</span> MyString&amp; s) &#123;</span><br><span class="line">    out &lt;&lt; s.<span class="built_in">what</span>();</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-右值引用作为函数参数"><a href="#1-右值引用作为函数参数" class="headerlink" title="1. 右值引用作为函数参数"></a>1. 右值引用作为函数参数</h2><h3 id="1-1-具体类"><a href="#1-1-具体类" class="headerlink" title="1.1 具体类"></a>1.1 具体类</h3><p>假设我们现在要打印一个MyString对象，如果函数使用的是一个具体的右值引用（即MyString&amp;&amp;）参数，那么，它就是右值引用，即只接受右值：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_my_string</span><span class="params">(MyString&amp;&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(s)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;s = &quot;</span> &lt;&lt; s &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若打算传一个左值，那就会报错：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MyString <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print_my_string</span>(s);</span><br></pre></td></tr></table></figure><p>此时会报：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No matching function <span class="keyword">for</span> call to <span class="string">&#x27;print_my_string&#x27;</span></span><br></pre></td></tr></table></figure><p>因为print_my_string需要的就是一个右值，必须给它一个右值，比如一个函数返回的临时变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MyString <span class="title">make_my_string</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* something)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">MyString</span>(something);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">print_my_string</span>(<span class="built_in">make_my_string</span>(<span class="string">&quot;hello world!&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为make_my_string返回了一个局部变量，且make_my_string返回的是一个对象，因此这里相当于返回一个临时变量MyString，因为是临时的，没人接手它的资源就要被销毁了，所以是名副其实的右值，此时满足print_my_string的入参条件，编译没问题，运行结果如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in common constructor!</span><br><span class="line">MyString&amp;&amp;</span><br><span class="line">s = hello world!</span><br></pre></td></tr></table></figure><p>可以看到，并没有调用太多的构造函数，尤其是没有去调用右值引用的拷贝构造函数，这当然是优化的结果（return value optimization）。尽管如此，依赖右值引用入参的print_my_string还是被调用了，符合预期。</p><p>总之，当函数的入参是一个具体的右值引用参数时，那么它就是一个右值引用参数，不能是其它类型值。可是，一旦把具体的右值引用参数改成模板类型，就发生巨大的改变。</p><h3 id="1-2-模板"><a href="#1-2-模板" class="headerlink" title="1.2 模板"></a>1.2 模板</h3><p>将print_my_string修改成模板函数后，变成这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_my_string</span><span class="params">(T&amp;&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(s)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;s = &quot;</span> &lt;&lt; s &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，如果传入一个MyString对象：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MyString <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">print_my_string</span>(s);</span><br></pre></td></tr></table></figure><p>会发现打印的是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in common constructor!</span><br><span class="line">MyString&amp;</span><br><span class="line">s = hello world!</span><br></pre></td></tr></table></figure><p>也就是实际在print_my_string函数中，s是一个左值引用。但如果使用print_my_string返回一个右值，那么就变成了右值引用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print_my_string</span>(<span class="built_in">make_my_string</span>(<span class="string">&quot;hello world!&quot;</span>));</span><br></pre></td></tr></table></figure><p>会打印：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in common constructor!</span><br><span class="line">MyString&amp;&amp;</span><br><span class="line">s = hello world!</span><br></pre></td></tr></table></figure><p>也就是说，T&amp;&amp;会根据入参的类型，来去定参数s的类型，甚至能变出const引用出来：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> MyString <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">print_my_string</span>(s);</span><br></pre></td></tr></table></figure><p>会打印：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in common constructor!</span><br><span class="line">MyString <span class="type">const</span>&amp;</span><br><span class="line">s = hello world!</span><br></pre></td></tr></table></figure><p>实际上，T&amp;&amp;和右值引用并不是一回事，T&amp;&amp;是一种万能引用，可以根据调用方的参数类型变成对应的引用类型。</p><h2 id="2-变量的右值引用"><a href="#2-变量的右值引用" class="headerlink" title="2. 变量的右值引用"></a>2. 变量的右值引用</h2><h3 id="2-1-变量为右值引用"><a href="#2-1-变量为右值引用" class="headerlink" title="2.1 变量为右值引用"></a>2.1 变量为右值引用</h3><p>变量定义为右值引用的情况，那么当然只能是右值引用了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line">MyString&amp;&amp; t = <span class="built_in">make_my_string</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(t)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; t &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>会打印：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in common constructor!</span><br><span class="line">MyString&amp;&amp;</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><p>这个特性似乎没什么可说的。那么换成auto&amp;&amp;呢？</p><h3 id="2-2-auto-amp-amp"><a href="#2-2-auto-amp-amp" class="headerlink" title="2.2 auto&amp;&amp;"></a>2.2 auto&amp;&amp;</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span>&amp;&amp; t = <span class="built_in">make_my_string</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(t)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; t &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>运行代码发现还是右值引用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in common constructor!</span><br><span class="line">MyString&amp;&amp;</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><p>这应该也很好理解，因为make_my_string就是返回一个右值。如果给auto&amp;&amp;一个左值呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line"><span class="function">MyString <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span>&amp;&amp; t = s;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(t)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; t &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>此时和前面的万能引用一样，变成了左值引用，以下是运行结果：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in common constructor!</span><br><span class="line">MyString&amp;</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><p>也和前面说的一样，如果加上const，t也会变成带const的类型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> MyString <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span>&amp;&amp; t = s;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(t)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; t &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>会打印：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in common constructor!</span><br><span class="line">MyString <span class="type">const</span>&amp;</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><p>可以加auto&amp;&amp;和T&amp;&amp;一样，都是万能引用，随着使用方的类型变化成对应的引用类型。</p><h2 id="3-万能引用加上const后的-amp-amp"><a href="#3-万能引用加上const后的-amp-amp" class="headerlink" title="3. 万能引用加上const后的&amp;&amp;"></a>3. 万能引用加上const后的&amp;&amp;</h2><p>上面说了T&amp;&amp;和auto&amp;&amp;是万能引用，那么const T&amp;&amp;和const auto&amp;&amp;呢？print_my_string 改成了加行const的T&amp;&amp;入参：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_my_string</span><span class="params">(<span class="type">const</span> T&amp;&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(s)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;s = &quot;</span> &lt;&lt; s &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时下面的代码会变成const左值引用吗？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> MyString <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">print_my_string</span>(s);</span><br></pre></td></tr></table></figure><p>实际上是会编译失败，在xcode上提示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No matching function <span class="keyword">for</span> call to <span class="string">&#x27;print_my_string&#x27;</span></span><br></pre></td></tr></table></figure><p>因为这个时候const T&amp;&amp;变成是模板类型为T的右值引用，不是万能引用了，强制std::move一下实现右值语义就能通过编译：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MyString <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">print_my_string</span>(std::<span class="built_in">move</span>(s));</span><br></pre></td></tr></table></figure><p>同理，auto&amp;&amp;加上const后，即const auto&amp;&amp;就不再是万能引用，而是右值引用，必须是右值才能给它赋值。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>对于实际类的右值引用就是右值引用。</p><p>但参数值T&amp;&amp;和右值引用无关，是万能引用，其参数类型由调用方决定，调用方传的什么类型，就是什么类型的引用，即可以是右值引用也可以是左值引用，甚至可以推导出const属性。</p><p>同理，作为一个变量，auto&amp;&amp;也是万能引用，其由赋值方来决定其是什么类型的引用，也即可以是右值引用也可以是左值引用，同样也可以推导出const属性。</p><p>但需要注意的是，const T&amp;&amp;和const auto&amp;&amp;却不是万能const引用，而是右值const引用，即它们只接受右值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天就向右值引用的使用场景进行开炮。&lt;/p&gt;
&lt;p&gt;首先，几句话快速复习左值右值：&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="https://www.jackhuang.cc/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Rust所有权</title>
    <link href="https://www.jackhuang.cc/2023/01/02/Rust%E6%89%80%E6%9C%89%E6%9D%83/"/>
    <id>https://www.jackhuang.cc/2023/01/02/Rust%E6%89%80%E6%9C%89%E6%9D%83/</id>
    <published>2023-01-02T08:17:40.000Z</published>
    <updated>2023-01-04T15:44:53.791Z</updated>
    
    <content type="html"><![CDATA[<p>Rust的所有权应该是Rust语言最难理解的一个，是初学者学习Rust遇到的第一个也是最大的陡坡。很多语言几乎不需要去花时间学习资源管理（Java，Go，Python等，C++当然是除外的），所以那些语言很流行，很受欢迎，因为只需要学习一下语法，关键字就能投入到项目中去了，但Rust学习单单是所有权（相当于资源管理）这一块内容，就可以成功劝退绝大部分程序员。</p><p>这是Rust的劣势，决定了Rust流行不起来，也是Rust的优势，决定了Rust效率和正确率上都远优于其它语言（甚至包括C语言）。今天写个总结，把Rust所有权内容说一说。</p><span id="more"></span><h2 id="1-简单的生命周期"><a href="#1-简单的生命周期" class="headerlink" title="1. 简单的生命周期"></a>1. 简单的生命周期</h2><p>从最简单的说起，let表示绑定某个指针到某个对象上，当离开作用域时，对象被销毁，指针进而变为invalid：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello rust!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如上面的代码，离开main函数，就变成invalid了，String对象也销毁了。</p><p>上面的代码相当于这样：</p><p><img src="https://www.jackhuang.cc/svg/rust_%E6%89%80%E6%9C%89%E6%9D%83.svg" alt="绑定关系"></p><p>这里简单说一下，s可以理解为一个指针，String即为对象，其成员p指向真正的字符串类型，后面的10位字符串的长度，16为String对象的容量（capacity） 。</p><h2 id="2-从最简单的所有权关系说起"><a href="#2-从最简单的所有权关系说起" class="headerlink" title="2. 从最简单的所有权关系说起"></a>2. 从最简单的所有权关系说起</h2><h3 id="2-1-赋值"><a href="#2-1-赋值" class="headerlink" title="2.1 赋值"></a>2.1 赋值</h3><p>其实Rust难，就难在下面这个简单代码里面，很多人是无法接受Rust这种规定，但其实Rust这么干也是用心良苦。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello rust!&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">t</span> = s;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;t = &#123;&#125;&quot;</span>, t);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;&quot;</span>, s);</span><br></pre></td></tr></table></figure><p>以上代码是不能通过编译的，报错如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  -<span class="punctuation">-&gt;</span> src/main.rs:<span class="number">17</span>:<span class="number">24</span></span><br><span class="line">   |</span><br><span class="line"><span class="number">14</span> |     <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello rust!&quot;</span>);</span><br><span class="line">   |         - <span class="keyword">move</span> occurs because `s` has <span class="keyword">type</span> `<span class="type">String</span>`, which does not implement the `<span class="built_in">Copy</span>` <span class="keyword">trait</span></span><br><span class="line"><span class="number">15</span> |     <span class="keyword">let</span> <span class="variable">t</span> = s;</span><br><span class="line">   |             - value moved here</span><br><span class="line"><span class="number">16</span> |     <span class="built_in">println!</span>(<span class="string">&quot;t = &#123;&#125;&quot;</span>, t);</span><br><span class="line"><span class="number">17</span> |     <span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;&quot;</span>, s);</span><br><span class="line">   |                        ^ value borrowed here after <span class="keyword">move</span></span><br></pre></td></tr></table></figure><p>因为s赋值给t后，s将会变成invalid，也就是悬空指针，这个时候不能对s进行任何访问操作，其对象关系图如下：</p><p><img src="https://www.jackhuang.cc/svg/rust%E8%B5%8B%E5%80%BC.svg" alt="赋值"></p><p>也即，s将失去String对象，t取而代之，只有去掉对s的访问才可以通过编译，Rust不允许访问没有资源的指针。</p><h3 id="2-2-参数传递"><a href="#2-2-参数传递" class="headerlink" title="2.2 参数传递"></a>2.2 参数传递</h3><p>同理，返回值也一样，比如我们有一个函数，返回一个String对象：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">print_upper_string</span> (t: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, t.<span class="title function_ invoke__">to_uppercase</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello rust!&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_upper_string</span>(s);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和之前一样，上面的代码第10行诗没有办法通过编译的，因为print_upper_string函数的参数t已经获得了s的String对象资源，s变成了悬空指针，cargo build会提示：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">error[E0382]: borrow of moved value: `s`</span><br><span class="line">  -<span class="punctuation">-&gt;</span> src/main.rs:<span class="number">16</span>:<span class="number">24</span></span><br><span class="line">   |</span><br><span class="line"><span class="number">14</span> |     <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello rust!&quot;</span>);</span><br><span class="line">   |         - <span class="keyword">move</span> occurs because `s` has <span class="keyword">type</span> `<span class="type">String</span>`, which does not implement the `<span class="built_in">Copy</span>` <span class="keyword">trait</span></span><br><span class="line"><span class="number">15</span> |     <span class="title function_ invoke__">print_upper_string</span>(s);</span><br><span class="line">   |                        - value moved here</span><br><span class="line"><span class="number">16</span> |     <span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;&quot;</span>, s);</span><br><span class="line">   |                        ^ value borrowed here after <span class="keyword">move</span></span><br></pre></td></tr></table></figure><h2 id="3-使用借用"><a href="#3-使用借用" class="headerlink" title="3. 使用借用"></a>3. 使用借用</h2><p>解决以上的问题有三个办法，一个是借用，一个是clone，还有一个是使用引用计数。这里先讲借用。</p><p>所谓借用，其实就是C++的引用，也就是被赋值的指针是引用，而不是拥有资源，此时不发生资源转移：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello rust!&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">t</span> = &amp;s;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;t = &#123;&#125;&quot;</span>, t);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;&quot;</span>, s);</span><br></pre></td></tr></table></figure><p>例如上面的代码，t获得&amp;s，即t只是借用s资源，并不拥有它，因此可以通过编译，运行良好。都会打印hello rust!：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = hello rust! </span><br><span class="line">s = hello rust! </span><br></pre></td></tr></table></figure><p>如果去打印t的值和s的地址，会发现它们是相等的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;t = &#123;:p&#125;&quot;</span>, t);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;:p&#125;&quot;</span>, &amp;s);</span><br></pre></td></tr></table></figure><p>此时会输出：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="number">0x7ffeefbff2f8</span></span><br><span class="line">s = <span class="number">0x7ffeefbff2f8</span></span><br></pre></td></tr></table></figure><p>所以t其实对s的一个引用：</p><p><img src="https://www.jackhuang.cc/svg/rust%E5%BC%95%E7%94%A8.svg" alt="引用"></p><p>因此，打印t和s所指向的字符串内容时，访问t也可以用解引用来访问：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;t = &#123;&#125;&quot;</span>, *t);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;&quot;</span>, s);</span><br></pre></td></tr></table></figure><p>以上两句代码同样也是打印hello rust!。而且，你会发现*t的地址正是s的地址。</p><h2 id="4-使用克隆"><a href="#4-使用克隆" class="headerlink" title="4. 使用克隆"></a>4. 使用克隆</h2><p>另一个可以用于赋值的方法，就是克隆函数clone：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello rust! &quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">t</span> = s.<span class="title function_ invoke__">clone</span>();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;t = &#123;&#125;, t = &#123;:p&#125;&quot;</span>, t, &amp;t);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;, s = &#123;:p&#125;&quot;</span>, s, &amp;s);</span><br></pre></td></tr></table></figure><p>这时，s和t就是两个完全不同的指针了，它们只是值相同而已：</p><p><img src="https://www.jackhuang.cc/svg/rust_clone.svg" alt="克隆"></p><h2 id="5-数组的特殊情况"><a href="#5-数组的特殊情况" class="headerlink" title="5. 数组的特殊情况"></a>5. 数组的特殊情况</h2><p>以上说的是非数组情况，到了数组，稍微有点不一样了，因为数组是维护了一组指针，如果随便允许把其中某个或者某些指针置为悬空指针，那么数组就需要维护哪个指针是悬空的，哪个指针是有效的。Rust拒绝这么干，所以，数组中的指针不允许直接变成悬空指针：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">array</span>: [<span class="type">String</span>; <span class="number">5</span>] = [<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;rust&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;!&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;jack&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;huang&quot;</span>),];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">t</span> = array[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = array[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;t = &#123;&#125;&quot;</span>, t);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;&quot;</span>, s);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按前面所说，以上代码中，t和s会获得array数组中第三、第四个资源所有权，但实际Rust拒绝这么干，此时编译错误：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">error[E0508]: cannot <span class="keyword">move</span> out of <span class="keyword">type</span> `[<span class="type">String</span>; <span class="number">5</span>]`, a non-copy array</span><br><span class="line">  -<span class="punctuation">-&gt;</span> src/main.rs:<span class="number">21</span>:<span class="number">13</span></span><br><span class="line">   |</span><br><span class="line"><span class="number">21</span> |     <span class="keyword">let</span> <span class="variable">t</span> = array[<span class="number">2</span>];</span><br><span class="line">   |             ^^^^^^^^</span><br><span class="line">   |             |</span><br><span class="line">   |             cannot <span class="keyword">move</span> out of here</span><br><span class="line">   |             <span class="keyword">move</span> occurs because `array[_]` has <span class="keyword">type</span> `<span class="type">String</span>`, which does not implement the `<span class="built_in">Copy</span>` <span class="keyword">trait</span></span><br><span class="line">   |             help: consider borrowing here: `&amp;array[<span class="number">2</span>]`</span><br><span class="line"></span><br><span class="line">error[E0508]: cannot <span class="keyword">move</span> out of <span class="keyword">type</span> `[<span class="type">String</span>; <span class="number">5</span>]`, a non-copy array</span><br><span class="line">  -<span class="punctuation">-&gt;</span> src/main.rs:<span class="number">22</span>:<span class="number">13</span></span><br><span class="line">   |</span><br><span class="line"><span class="number">22</span> |     <span class="keyword">let</span> <span class="variable">s</span> = array[<span class="number">3</span>];</span><br><span class="line">   |             ^^^^^^^^</span><br><span class="line">   |             |</span><br><span class="line">   |             cannot <span class="keyword">move</span> out of here</span><br><span class="line">   |             <span class="keyword">move</span> occurs because `array[_]` has <span class="keyword">type</span> `<span class="type">String</span>`, which does not implement the `<span class="built_in">Copy</span>` <span class="keyword">trait</span></span><br><span class="line">   |             help: consider borrowing here: `&amp;array[<span class="number">3</span>]`</span><br></pre></td></tr></table></figure><p>也即，对于数组中的资源，我们只能用引用访问，以下可以正常编译通过且打印如预期：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">array</span>: [<span class="type">String</span>; <span class="number">5</span>] = [<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;rust&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;!&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;jack&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;huang&quot;</span>),];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">t</span> = &amp;array[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = &amp;array[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;t = &#123;&#125;&quot;</span>, *t);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;&quot;</span>, *s);</span><br></pre></td></tr></table></figure><p>相比之前的代码，t和s都变成了引用，由于是引用，并不会转移所有权，因此array的资源都在。</p><p>如果是多个引用，则直接使用引用数组即可，例如连续引用数组的第三和第四个资源：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">array</span>  = <span class="built_in">vec!</span>[<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;rust&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;!&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;jack&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;huang&quot;</span>),];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">t</span>: &amp;[<span class="type">String</span>] = &amp;array[<span class="number">2</span>..=<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125; &quot;</span>, t);</span><br></pre></td></tr></table></figure><p>此时打印：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;!&quot;</span>, <span class="string">&quot;jack&quot;</span>] </span><br></pre></td></tr></table></figure><p>这里，数组被我改成了Vec对象，其实只要是连续的对象，比如数组（即[]），Vec，String都可以用引用数组来引用，String的引用有点特殊：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello rust!&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">t</span>: &amp;<span class="type">str</span> = &amp;s[<span class="number">2</span>..=<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125; &quot;</span>, t);</span><br></pre></td></tr></table></figure><p>这里看到，使用的是&amp;str而不是&amp;[T]，这是Rust的两类数组，&amp;[T]是普通数组引用，&amp;str相当于对字符类型的特殊数组引用，即char串引用。作为特殊的引用，Rust还给它们（&amp;[T]和&amp;str）起了个名字叫切片，即slice。关于引用后面还要专门拿出来讲，这里关注所有权这个话题就好了。</p><p>尽管数组不允许别人把它的资源拿走，只能用引用，但如果用迭代器去访问，资源的所有权还是会被拿走的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;rust&quot;</span>), </span><br><span class="line">                          <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;!&quot;</span>), ];</span><br><span class="line"><span class="keyword">for</span> <span class="variable">t</span> <span class="keyword">in</span> v &#123;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;t = &#123;&#125;&quot;</span>, t)</span><br><span class="line">&#125;                              </span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;v = &#123;:?&#125;&quot;</span>, v);</span><br></pre></td></tr></table></figure><p>上面的代码会报错，因为v的资源的所有权都被t拿走了，v已经是一个悬空指针：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  -<span class="punctuation">-&gt;</span> src/main.rs:<span class="number">32</span>:<span class="number">26</span></span><br><span class="line">   |</span><br><span class="line"><span class="number">25</span> |     <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>), </span><br><span class="line">   |         - <span class="keyword">move</span> occurs because `v` has <span class="keyword">type</span> `<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;`, which does not implement the `<span class="built_in">Copy</span>` <span class="keyword">trait</span></span><br><span class="line">...</span><br><span class="line"><span class="number">28</span> |     <span class="keyword">for</span> <span class="variable">t</span> <span class="keyword">in</span> v &#123;</span><br><span class="line">   |              - `v` moved due to this implicit call to `.<span class="title function_ invoke__">into_iter</span>()`</span><br><span class="line">...</span><br><span class="line"><span class="number">32</span> |     <span class="built_in">println!</span>(<span class="string">&quot;v = &#123;:?&#125;&quot;</span>, v);</span><br><span class="line">   |                          ^ value borrowed here after <span class="keyword">move</span></span><br></pre></td></tr></table></figure><h2 id="6-primitive类型不会有所有权转移"><a href="#6-primitive类型不会有所有权转移" class="headerlink" title="6. primitive类型不会有所有权转移"></a>6. primitive类型不会有所有权转移</h2><p>尽管前面讲了很多所有权转移的例子，但对于原始类型（比如整型，bool，char）并不会有所有权转移的问题，它们永远都是copy：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">b</span> = a; <span class="comment">// 不会发生所有权转移，a和b都有自己的值3</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;a = &#123;&#125;, b = &#123;&#125;&quot;</span>, a, b);</span><br></pre></td></tr></table></figure><p>上面的代码正常编译和运行：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span>, b = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>所有权和引用后面还会专门讲很多，这次算是先来个前奏。慢慢积累吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Rust的所有权应该是Rust语言最难理解的一个，是初学者学习Rust遇到的第一个也是最大的陡坡。很多语言几乎不需要去花时间学习资源管理（Java，Go，Python等，C++当然是除外的），所以那些语言很流行，很受欢迎，因为只需要学习一下语法，关键字就能投入到项目中去了，但Rust学习单单是所有权（相当于资源管理）这一块内容，就可以成功劝退绝大部分程序员。&lt;/p&gt;
&lt;p&gt;这是Rust的劣势，决定了Rust流行不起来，也是Rust的优势，决定了Rust效率和正确率上都远优于其它语言（甚至包括C语言）。今天写个总结，把Rust所有权内容说一说。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust" scheme="https://www.jackhuang.cc/categories/Rust/"/>
    
    
  </entry>
  
  <entry>
    <title>C++查看类型</title>
    <link href="https://www.jackhuang.cc/2023/01/01/%E6%9F%A5%E7%9C%8B%E7%B1%BB%E5%9E%8B/"/>
    <id>https://www.jackhuang.cc/2023/01/01/%E6%9F%A5%E7%9C%8B%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-01-01T06:33:22.000Z</published>
    <updated>2023-01-05T00:59:14.911Z</updated>
    
    <content type="html"><![CDATA[<p>在进一步研究右值引用或者说&amp;&amp;符号之前，先稍微说一下C++中如何查看一个变量的类型。</p><span id="more"></span><h2 id="1-获取变量的类型"><a href="#1-获取变量的类型" class="headerlink" title="1. 获取变量的类型"></a>1. 获取变量的类型</h2><p>只需要用关键字decltype既可以拿到关键字的类型，例如下面的代码，d和s的类型都一样，都是const std::string：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> std::string <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">decltype</span>(s) <span class="built_in">d</span>(<span class="string">&quot;hello rust!&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="2-C-标准的查看类型方法"><a href="#2-C-标准的查看类型方法" class="headerlink" title="2. C++标准的查看类型方法"></a>2. C++标准的查看类型方法</h2><p>C++标准使用的方法是std::type_info这个类来获取变量类型，但这个类无法直接构造，因为它的构造函数被deleted了，只能用C++关键字typeid来获得这个类对象。std::type_info有一个成员函数叫name，它返回变量的类型，只是这个变量类型会丢失一些关键信息，比如const或者引用，因此目前标准并没有给出很好的方法去查看变量类型是什么。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> std::string <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">decltype</span>(s) <span class="built_in">d</span>(<span class="string">&quot;hello rust!&quot;</span>);</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">typeid</span>(d).<span class="built_in">name</span>() &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>例如上面这段代码，在xcode上打印的就是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE</span><br></pre></td></tr></table></figure><p>这个信息丢失了const，甚至也很难看出这到底是什么东西，比如最简单的int类型居然也是一个迷惑的i：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下打印i，而不是const int&amp;</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">typeid</span>(a).<span class="built_in">name</span>() &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>总之，C++的std::type_info（用关键字typeid）获得的信息真是没什么实用性，名字难看（可读性差），且会丢失一些重要的关键字，比如const，votlatile等。</p><p>顺便再强调一下，typeid是一个关键字，返回std::type_info对象，这个是在编译时期就确定的，因此，如果给一个父类指针，其指向子类对象，那么运行时期依然返回的是父类类型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Derived t;</span><br><span class="line"><span class="type">const</span> Base* p = &amp;t;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">typeid</span>(p).<span class="built_in">name</span>() &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>以上，将会打印：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PK4Base</span><br></pre></td></tr></table></figure><p>打印出来的是PK4Base，表示即p是一个指针，指向Base对象（很明显不准确），尽管实际是一个指针，其指向子类对象。因为，这一切都是在编译时期就确定name函数的返回值了。</p><h2 id="3-让编译器告诉我们类型是什么"><a href="#3-让编译器告诉我们类型是什么" class="headerlink" title="3. 让编译器告诉我们类型是什么"></a>3. 让编译器告诉我们类型是什么</h2><p>标准的std::type_info无法准确的告诉我们类型是什么，这里有一个简单但依然不完美的方法，即通过编译器在编译的时候告诉我们，缺点是必须触发编译错误，这个方法偶尔临时应急用倒是挺实用的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Whatis</span>;</span><br></pre></td></tr></table></figure><p>上面的代码，因为Whatis类没有定义，若尝试实例化它，编译器就会告诉我们这个需要实例化的类没有定义，并且把T类型打印出来：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> std::string <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">decltype</span>(s) <span class="built_in">d</span>(<span class="string">&quot;hello rust!&quot;</span>);</span><br><span class="line"></span><br><span class="line">Derived t;</span><br><span class="line"><span class="type">const</span> Base* p = &amp;t;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码xcode上编译报错：</span></span><br><span class="line"><span class="comment">// Implicit instantiation of undefined template &#x27;Whatis&lt;const std::__1::basic_string&lt;char&gt; &gt;</span></span><br><span class="line">Whatis&lt;<span class="keyword">decltype</span>(d)&gt; whatisd;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码xcode上编译报错：</span></span><br><span class="line"><span class="comment">// Implicit instantiation of undefined template &#x27;Whatis&lt;const Base *&gt;&#x27;</span></span><br><span class="line">Whatis&lt;<span class="keyword">decltype</span>(p)&gt; whatisp;</span><br></pre></td></tr></table></figure><p> 这种方法能让编译器准确告诉我们T是什么，但需要编译错误，也是可惜。</p><h2 id="4-使用boost告诉我们类型是什么"><a href="#4-使用boost告诉我们类型是什么" class="headerlink" title="4. 使用boost告诉我们类型是什么"></a>4. 使用boost告诉我们类型是什么</h2><p>目前最好的方法就是使用boost的boost::typeindex::type_id_with_cvr类，这个类的pretty_name方法会完美返回类型名称：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">const</span> std::string <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">decltype</span>(s) <span class="built_in">d</span>(<span class="string">&quot;hello rust!&quot;</span>);</span><br><span class="line">    </span><br><span class="line">Derived t;</span><br><span class="line"><span class="type">const</span> Base* p = &amp;t;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(d)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(p)&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>会打印：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::__1::basic_string&lt;<span class="type">char</span>, std::__1::char_traits&lt;<span class="type">char</span>&gt;, std::__1::allocator&lt;<span class="type">char</span>&gt; &gt; <span class="type">const</span></span><br><span class="line">Base <span class="type">const</span>*</span><br></pre></td></tr></table></figure><p>可以看到，不需要编译失败，直接就打印出准确的类型，包含了const关键字和可阅读的指针符号。</p><p>有了这个工具，我们就可以研究&amp;&amp;符号了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在进一步研究右值引用或者说&amp;amp;&amp;amp;符号之前，先稍微说一下C++中如何查看一个变量的类型。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="https://www.jackhuang.cc/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>快速说一下C++右值引用</title>
    <link href="https://www.jackhuang.cc/2022/12/31/%E5%BF%AB%E9%80%9F%E8%AF%B4%E4%B8%80%E4%B8%8B%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/"/>
    <id>https://www.jackhuang.cc/2022/12/31/%E5%BF%AB%E9%80%9F%E8%AF%B4%E4%B8%80%E4%B8%8B%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</id>
    <published>2022-12-31T12:43:52.000Z</published>
    <updated>2023-01-05T00:59:45.438Z</updated>
    
    <content type="html"><![CDATA[<p>希望用最简单的话把右值引用说清楚。</p><span id="more"></span><p>什么是右值引用：右值引用即资源传递，右值引用后，引用方会获得资源，被引用方，如同右值那样，被销毁，处于invalid状态。</p><p>为什么需要右值引用：在语义上表达资源传递。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyString</span>&#123;</span><br><span class="line">    <span class="type">char</span>* s_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyString</span>(<span class="type">const</span> <span class="type">char</span>* other) &#123;</span><br><span class="line">        <span class="built_in">copy</span>(other);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MyString</span>() &#123;</span><br><span class="line">        <span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 左值引用构造函数</span></span><br><span class="line">    <span class="built_in">MyString</span>(<span class="type">const</span> MyString&amp; other) &#123;</span><br><span class="line">        <span class="built_in">copy</span>(other.s_);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 右值引用构造函数</span></span><br><span class="line">    <span class="built_in">MyString</span>(MyString&amp;&amp; other) &#123;</span><br><span class="line">        <span class="built_in">copy</span>(other.s_);</span><br><span class="line">        other.<span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">what</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s_;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span>[] s_;</span><br><span class="line">        s_ = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">copy</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* other)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">release</span>();</span><br><span class="line">        <span class="type">int</span> len = (<span class="type">int</span>)<span class="built_in">strlen</span>(other);</span><br><span class="line">        s_ = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strncpy</span>(s_, other, len);</span><br><span class="line">        s_[len] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现输出</span></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; out, <span class="type">const</span> MyString&amp; s) &#123;</span><br><span class="line">    out &lt;&lt; s.<span class="built_in">what</span>();</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如上面的MyString类，构造函数分为左值引用构造函数和右值引用构造函数。</p><p>右值引用构造函数的实现中，需要release调other的指针，因为根据右值引用的协议，被引用的对象应该处于被销毁的状态。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MyString <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">MyString <span class="title">d</span><span class="params">(std::move(s))</span></span>;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;d = &quot;</span> &lt;&lt; d &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// panic!</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;s = &quot;</span> &lt;&lt; s &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>例如执行以上的代码，std::move是强制把s转为右值，从而触发调用MyString的右值引用构造函数，之后，s将会变成invalid状态，此时打印s会出现未定义状态现象。</p><p>当然这个协议完全可以不去遵守，即MyString的右值引用构造函数中不调用release()，这是C++灵活之处，编译器不会强制你遵守这个协议。但不按约定去做，右值引用存在就没有意义了。C++标准库都遵守右值引用的协议。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">s</span><span class="params">(<span class="string">&quot;hello world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">d</span><span class="params">(std::move(s))</span></span>;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;d = &quot;</span> &lt;&lt; d &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;s = &quot;</span> &lt;&lt; s &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>例如上面这段代码，s会变成长度为0的空字符串。相比我写的MyString这样更安全，也达到了资源传递的语义目的。</p><p>后面研究一下万能引用，这又是另一个话题。</p><p>新年快乐！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;希望用最简单的话把右值引用说清楚。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="https://www.jackhuang.cc/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>今后要好好做的一些事情</title>
    <link href="https://www.jackhuang.cc/2022/12/30/%E4%BB%8A%E5%90%8E%E8%A6%81%E5%A5%BD%E5%A5%BD%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85/"/>
    <id>https://www.jackhuang.cc/2022/12/30/%E4%BB%8A%E5%90%8E%E8%A6%81%E5%A5%BD%E5%A5%BD%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85/</id>
    <published>2022-12-29T16:09:46.000Z</published>
    <updated>2023-01-03T03:43:25.532Z</updated>
    
    <content type="html"><![CDATA[<p>未来要做的东西：</p><p>1、打算用rust做一个学习水平的RPC系统。</p><p>2、写关于C++的博客。多年C++经验，应该是要总结点什么。</p><p>3、写关于mysql的博客。</p><p>4、学习数学。</p><p>对了，还要好好学习写作，倾尽所能，写点东西，在互联网的一个小小的角落里，刷刷存在感吧。</p><p>坚持写作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;未来要做的东西：&lt;/p&gt;
&lt;p&gt;1、打算用rust做一个学习水平的RPC系统。&lt;/p&gt;
&lt;p&gt;2、写关于C++的博客。多年C++经验，应该是要总结点什么。&lt;/p&gt;
&lt;p&gt;3、写关于mysql的博客。&lt;/p&gt;
&lt;p&gt;4、学习数学。&lt;/p&gt;
&lt;p&gt;对了，还要好好学习写作，倾尽所</summary>
      
    
    
    
    <category term="想法" scheme="https://www.jackhuang.cc/categories/%E6%83%B3%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
